package com.semkagtn.visitor;

import com.semkagtn.tree.AddExpressionNode;
import com.semkagtn.tree.AndExpressionNode;
import com.semkagtn.tree.BreakNode;
import com.semkagtn.tree.ConstantNode;
import com.semkagtn.tree.ContinueNode;
import com.semkagtn.tree.DivExpressionNode;
import com.semkagtn.tree.DoWhileNode;
import com.semkagtn.tree.EqExpressionNode;
import com.semkagtn.tree.FunctionCallNode;
import com.semkagtn.tree.FunctionNode;
import com.semkagtn.tree.FunctionParameterNode;
import com.semkagtn.tree.GeExpressionNode;
import com.semkagtn.tree.GtExpressionNode;
import com.semkagtn.tree.IfElseNode;
import com.semkagtn.tree.LeExpressionNode;
import com.semkagtn.tree.LtExpressionNode;
import com.semkagtn.tree.ModExpressionNode;
import com.semkagtn.tree.MulExpressionNode;
import com.semkagtn.tree.NeExpressionNode;
import com.semkagtn.tree.NegExpressionNode;
import com.semkagtn.tree.NotExpressionNode;
import com.semkagtn.tree.OrExpressionNode;
import com.semkagtn.tree.ProgramNode;
import com.semkagtn.tree.ReturnNode;
import com.semkagtn.tree.ScopeNode;
import com.semkagtn.tree.SubExpressionNode;
import com.semkagtn.tree.VariableDeclarationNode;
import com.semkagtn.tree.VariableNode;
import com.semkagtn.tree.WhileNode;

public interface AstVisitor<T> {
	T visit(ProgramNode program);
	T visit(ScopeNode scope);
	T visit(FunctionNode function);
	T visit(VariableDeclarationNode variableDeclaration);
	T visit(VariableNode variable);
	T visit(IfElseNode ifElse);
	T visit(WhileNode whileStatement);
	T visit(DoWhileNode doWhile);
	T visit(FunctionCallNode functionCall);
	T visit(ReturnNode returnStatement);
	T visit(FunctionParameterNode functionParameter);
	T visit(ConstantNode constant);
	T visit(NotExpressionNode not);
	T visit(NegExpressionNode negation);
	T visit(AddExpressionNode add);
	T visit(SubExpressionNode sub);
	T visit(MulExpressionNode mul);
	T visit(DivExpressionNode div);
	T visit(ModExpressionNode mod);
	T visit(LtExpressionNode lt);
	T visit(LeExpressionNode le);
	T visit(GtExpressionNode gt);
	T visit(GeExpressionNode ge);
	T visit(EqExpressionNode eq);
	T visit(NeExpressionNode ne);
	T visit(AndExpressionNode and);
	T visit(OrExpressionNode or);
	T visit(BreakNode breakStatement);
	T visit(ContinueNode continueNode);
}